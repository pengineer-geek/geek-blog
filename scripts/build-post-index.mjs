import { globby } from "globby";
import fs from "node:fs";
import path from "node:path";
import matter from "gray-matter";

const CONTENT_GLOBS = ["content/**/*.mdx"];
const OUT_DIR = path.join(process.cwd(), "generated");
const OUT_FILE = path.join(OUT_DIR, "post-index.ts");

function sortPosts(posts) {
  return posts.sort((a, b) => {
    const ao = a.order ?? 0, bo = b.order ?? 0;
    if (ao !== bo) return ao - bo;
    const ad = a.date ? Date.parse(a.date) : 0;
    const bd = b.date ? Date.parse(b.date) : 0;
    if (ad !== bd) return bd - ad; // desc
    return a.title.localeCompare(b.title);
  });
}

const required = ["title", "slug", "sectionKey", "subKey"];

const sectionMap = new Map(); // sectionKey -> subMap
const files = await globby(CONTENT_GLOBS);

for (const f of files) {
  const raw = fs.readFileSync(f, "utf-8");
  const fm = matter(raw).data ?? {};
  const miss = required.filter((k) => !(k in fm));
  if (miss.length) {
    console.warn(`[post-index] Missing ${miss.join(", ")} in ${f}`);
    continue;
  }
  const meta = {
    title: String(fm.title),
    slug: String(fm.slug).replace(/^\/+|\/+$/g, ""),
    excerpt: fm.excerpt ?? undefined,
    tags: Array.isArray(fm.tags) ? fm.tags : [],
    date: fm.date ?? undefined,
    sectionKey: String(fm.sectionKey),
    subKey: String(fm.subKey),
    order: typeof fm.order === "number" ? fm.order : undefined,
  };

  if (!sectionMap.has(meta.sectionKey)) sectionMap.set(meta.sectionKey, new Map());
  const subMap = sectionMap.get(meta.sectionKey);
  if (!subMap.has(meta.subKey)) subMap.set(meta.subKey, []);
  subMap.get(meta.subKey).push(meta);
}

// マップ → 配列 & 並び替え
const sections = [];
for (const [sectionKey, subMap] of sectionMap) {
  const subs = [];
  for (const [subKey, posts] of subMap) {
    subs.push({ key: subKey, posts: sortPosts(posts) });
  }
  sections.push({ key: sectionKey, subs });
}

// 出力用 TS 文字列
const header =
  `// @generated by scripts/build-post-index.mjs. DO NOT EDIT.\n` +
  `/* eslint-disable */\n\n` +
  `export type PostMeta = {\n` +
  `  title: string;\n  slug: string;\n  excerpt?: string;\n  tags?: string[];\n  date?: string;\n  sectionKey: string;\n  subKey: string;\n  order?: number;\n` +
  `};\n` +
  `export type SubIndex = { key: string; posts: PostMeta[] };\n` +
  `export type SectionIndex = { key: string; subs: SubIndex[] };\n\n`;

const body =
  `const data: { sections: SectionIndex[] } = ${JSON.stringify({ sections }, null, 2)};\n\n` +
  `export default data;\n`;

fs.mkdirSync(OUT_DIR, { recursive: true });
fs.writeFileSync(OUT_FILE, header + body, "utf-8");
console.log(`[post-index] Wrote ${path.relative(process.cwd(), OUT_FILE)} (${sections.length} sections)`);
